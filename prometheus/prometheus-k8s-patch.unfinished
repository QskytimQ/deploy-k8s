apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: STORAGE_CLASS_TYPE
provisioner: STORAGE_CLASS_PROVISIONER
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Retain
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: k8s
  namespace: CUSTOM_NAMESPACE
  labels:
    prometheus: k8s
spec:
  replicas: {{ prometheus_replicas }}
  baseImage: {{ base_image_addr }}/prometheus
  version: PROMETHEUS_VERSION
  externalUrl: PROMETHEUS_EXTERNAL_URL
  serviceAccountName: prometheus-k8s
  serviceMonitorSelector:
    matchExpressions:
    - {key: k8s-app, operator: Exists}
  ruleSelector:
    matchLabels:
      role: alert-rules
      prometheus: k8s
  nodeSelector:
    node_label_key: node_label_value
  priorityClassName: system-node-critical
  resources:
    requests:
      memory: 200Mi
      cpu: 200m
    limits:
      memory: PROMETHEUS_MEMORY_LIMIT
      cpu: 8000m
  retention: PROMETHEUS_STORAGE_RETENTION
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  storage:
    class: STORAGE_CLASS_TYPE
    selector:
    resources:
    volumeClaimTemplate:
      metadata:
        annotations:
          annotation1: prometheus
      spec:
        storageClassName: STORAGE_CLASS_TYPE
        resources:
          requests:
            storage: PROMETHEUS_STORAGE_VOLUME_SIZE
  containers:
  - name: prometheus-config-reloader
    image: {{ base_image_addr }}/prometheus-config-reloader:v0.29.0
    resources:
      limits:
        cpu: 500m
        memory: 200Mi
      requests:
        cpu: 50m
        memory: 50Mi
  - name: rules-configmap-reloader
    image: {{ base_image_addr }}/configmap-reload:v0.0.1
    resources:
      limits:
        cpu: 1000m
        memory: 300Mi
      requests:
        cpu: 50m
        memory: 50Mi
  alerting:
    alertmanagers:
    - namespace: CUSTOM_NAMESPACE
      name: alertmanager-main
      port: web
