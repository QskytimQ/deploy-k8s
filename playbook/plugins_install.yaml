---
- name: Prometheus nstall
  hosts: 127.0.0.1
  vars:
    cluster_dir: /root/{{ cluster_name }}
    master_count: "{{ groups['masters'] | length }}"
  tasks:
    - import_tasks: ./network/calico_install.yaml
      when: network_calico

    - name: Wait For calico-node Available
      shell: kubectl get ds calico-node -n kube-system | sed '1d' | awk -F ' ' '{if ($2 > 0 && $2 == $6) {print "OK"}}'
      register: calico_node_result
      until: calico_node_result.stdout.find("OK") != -1
      retries: 180
      delay: 10
      when: network_calico

    - name: Dir Create All Addon dir 
      file: path={{ cluster_dir }}/addon-yaml/ state=directory 

    - name: DNS Replicas Get
      shell: ansible -i ../inventory/{{ cluster_name }}_hosts masters --list-hosts | sed '1d' | wc -l
      register: dns_replicas

    - name: Ingress Replicas Get
      shell: ansible -i ../inventory/{{ cluster_name }}_hosts ingress --list-hosts | sed '1d' | wc -l
      register: ingress_replicas

    - name: Template All Addon Yaml
      template: src={{ item }} dest={{ cluster_dir }}/addon-yaml/
      with_fileglob:
        - "../addon-yaml/*"

    - name: Install Addon plugin - kube-dns
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/kube-dns.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      when: kube_dns | default(False)

    - name: Install Addon plugin - coredns
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/coredns.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      when: core_dns | default(False)

    - name: Install Addon plugin - kubernetes-dashboard
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/kubernetes-dashboard.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"

    - name: Install Addon plugin - traefik2
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/traefik2.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      when: traefik2 | default(False)

    - name: Install Addon plugin - traefik 
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/traefik.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      when: traefik | default(False)

    - name: Install Addon plugin - k8s-nginx
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/k8s-ingress-nginx.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      when: k8s_nginx | default(False)

    - name: Install Addon plugin - nginxinc-nginx
      shell: kubectl create -f {{ cluster_dir }}/addon-yaml/nginxinc-ingress-nginx.yaml --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      when: nginxinc_nginx | default(False)

    - name: Dir Create Metric Server dir 
      file: path={{ cluster_dir }}/metric-server/ state=directory 

    - name: Template All Metric Server Yaml
      template: src={{ item }} dest={{ cluster_dir }}/metric-server/
      with_fileglob:
        - "../metric-server/*"

    - name: Install Metric Server 
      shell: kubectl create -f {{ cluster_dir }}/metric-server/ --kubeconfig={{ cluster_dir }}/config
      register: result
      failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"

      #    - import_tasks: ./prometheus.yaml

    - name: Dir Create Custom Metric Server dir 
      file: path={{ cluster_dir }}/custom-metric-server/ state=directory 

    - name: Template Custom Metric Server Yaml
      template: src={{ item }} dest={{ cluster_dir }}/custom-metric-server/
      with_fileglob:
        - "../custom-metric-server/*"

     #    - name: Install Custom Metric Server 
      #     shell: kubectl create -f {{ cluster_dir }}/custom-metric-server/ --kubeconfig={{ cluster_dir }}/config
      #     register: result
      #     failed_when: "result.rc != 0 and 'AlreadyExists' not in result.stderr"
      
    - import_tasks: ./wocloud-ipam-cluster-config.yaml
      when: network_floatingip | default(False)
    


