---
##Admin Config And Bootstrapping And kube-proxy Config Generate
- hosts: 127.0.0.1 
  vars:
    local_ssl: /root/{{ cluster_name }}/ssl
    cluster_dir: /root/{{ cluster_name }}
  tasks:
    - name: Cluster Name Dir 
      file: path={{ cluster_dir }} state=directory
    - name: K8S Config Create - Uncompress Kubectl
      unarchive: src=../bin/k8s-bin-1.12.0.tar.gz dest=../bin/
    - name: K8S Config Create - Copy Kubectl
      copy: src=../bin/kubectl dest=/usr/bin force=true mode=0755

    #admin kubeconfig generate
    - name: K8S Kubectl Config Create - set-cluster
      shell: kubectl config set-cluster kubernetes --certificate-authority={{ local_ssl }}/ca.pem --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ cluster_dir }}/config
    - name: K8S Kubectl Config Create - set-credentials admin 
      shell: kubectl config set-credentials admin --client-certificate={{ local_ssl }}/admin.pem --embed-certs=true --client-key={{ local_ssl }}/admin-key.pem --kubeconfig={{ cluster_dir }}/config
    - name: K8S Kubectl Config Create - set-context kubernetes
      shell: kubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig={{ cluster_dir }}/config
    - name: K8S Kubectl Config Create - use-context kubernetes 
      shell: kubectl config use-context kubernetes --kubeconfig={{ cluster_dir }}/config

    #kubelet kubeconfig generate
    - name: Bootstrapping Token Genreate 
      shell: head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 
      register: token
    - name: Bootstrapping Token File Genreate 
      shell: echo '{{ token.stdout }},kubelet-bootstrap,10001,"system:kubelet-bootstrap"' > {{ cluster_dir }}/token.csv

    - name: Bootstrapping Config Create - set-cluster
      shell: kubectl config set-cluster kubernetes --certificate-authority={{ local_ssl }}/ca.pem --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ cluster_dir }}/bootstrap.kubeconfig
    - name: Bootstrapping Config Create - set-client-credentials 
      shell: kubectl config  set-credentials kubelet-bootstrap --token={{ token.stdout }} --kubeconfig={{ cluster_dir }}/bootstrap.kubeconfig
    - name: Bootstrapping Config - set-context
      shell: kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig={{ cluster_dir }}/bootstrap.kubeconfig
    - name: Bootstrapping Config - default-use-context
      shell: kubectl config use-context default --kubeconfig={{ cluster_dir }}/bootstrap.kubeconfig

    #kube-proxy kubeconfig generate
    - name: Kube-porxy Config Create - set-cluster
      shell: kubectl config set-cluster kubernetes --certificate-authority={{ local_ssl }}/ca.pem --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ cluster_dir }}/kube-proxy.kubeconfig
    - name: Kube-porxy Config Create - set-client-credentials 
      shell: kubectl config set-credentials kube-proxy --client-certificate={{ local_ssl }}/kube-proxy.pem --client-key={{ local_ssl }}/kube-proxy-key.pem --embed-certs=true --kubeconfig={{ cluster_dir }}/kube-proxy.kubeconfig
    - name: Kube-porxy Config - set-context
      shell: kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig={{ cluster_dir }}/kube-proxy.kubeconfig
    - name: Kube-porxy Config - default-use-context
      shell: kubectl config use-context default --kubeconfig={{ cluster_dir }}/kube-proxy.kubeconfig

    #kube-controller-manager kubeconfig generate
    - name: Kube-controller-manager Config Create - set-cluster
      shell: kubectl config set-cluster kubernetes --certificate-authority={{ local_ssl }}/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig={{ cluster_dir }}/kube-controller-manager.kubeconfig
    - name: Kube-controller-manager Config Create - set-client-credentials 
      shell: kubectl config set-credentials kube-controller-manager --client-certificate={{ local_ssl }}/kube-controller-manager.pem --client-key={{ local_ssl }}/kube-controller-manager-key.pem --embed-certs=true --kubeconfig={{ cluster_dir }}/kube-controller-manager.kubeconfig
    - name: Kube-controller-manager Config - set-context
      shell: kubectl config set-context default --cluster=kubernetes --user=kube-controller-manager --kubeconfig={{ cluster_dir }}/kube-controller-manager.kubeconfig
    - name: Kube-controller-manager Config - default-use-context
      shell: kubectl config use-context default --kubeconfig={{ cluster_dir }}/kube-controller-manager.kubeconfig

    #kube-scheduler kubeconfig generate
    - name: Kube-scheduler Config Create - set-cluster
      shell: kubectl config set-cluster kubernetes --certificate-authority={{ local_ssl }}/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig={{ cluster_dir }}/kube-scheduler.kubeconfig
    - name: Kube-scheduler Config Create - set-client-credentials 
      shell: kubectl config set-credentials kube-scheduler --client-certificate={{ local_ssl }}/kube-scheduler.pem --client-key={{ local_ssl }}/kube-scheduler-key.pem --embed-certs=true --kubeconfig={{ cluster_dir }}/kube-scheduler.kubeconfig
    - name: Kube-scheduler Config - set-context
      shell: kubectl config set-context default --cluster=kubernetes --user=kube-scheduler --kubeconfig={{ cluster_dir }}/kube-scheduler.kubeconfig
    - name: Kube-scheduler Config - default-use-context
      shell: kubectl config use-context default --kubeconfig={{ cluster_dir }}/kube-scheduler.kubeconfig

    - name: Postgres pg_hba.conf  Config
      copy: src=../postgresql/pg_hba.conf dest={{ cluster_dir }}/pg_hba.conf force=true

    - name: Haproxy Config Copy
      copy: src=../haproxy/haproxy.cfg dest={{ cluster_dir }}/haproxy.cfg force=true
    - name: Haproxy Prepare Script Copy
      shell: ../haproxy/prepare.sh {{ cluster_dir }}

